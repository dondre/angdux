"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const interfaces_1 = require("./interfaces");
const loadProps = (model) => {
    const _properties = new interfaces_1.Dictionary();
    Object.keys(model).forEach(key => _properties.add(key, new rxjs_1.BehaviorSubject(model[key])));
    return _properties;
};
const loadActions = (actions) => {
    const _actions = new interfaces_1.Dictionary();
    Object.keys(actions).forEach(key => _actions.add(key, actions[key]));
    return _actions;
};
const setState = (properties) => {
    return (state) => {
        if (!state)
            return;
        Object.keys(state).forEach(key => {
            const prop = properties.item(key);
            if (prop && prop.value !== state[key]) {
                prop.next(state[key]);
            }
        });
    };
};
const getState = (props) => {
    let state = {};
    props.keys().forEach(key => {
        if (props.item(key))
            state[key] = props.item(key).value;
    });
    return state;
};
exports.merge = (state, message) => {
    let merge = {};
    Object.keys(state).forEach(key => {
        merge[key] = state[key];
    });
    Object.keys(message).forEach(key => {
        if (key != "type")
            merge[key] = message[key];
    });
    return merge;
};
exports.createStore = (initialState, actions) => {
    let properties = loadProps(initialState);
    actions = loadActions(actions);
    return {
        properties,
        actions
    };
};
exports.dispatcher = (props, reducer) => {
    return (message) => {
        const currentState = getState(props);
        const state = reducer(currentState, message);
        setState(props)(state);
    };
};
function Angdux(store) {
    return function (constructor) {
        const hooks = ['ngOnInit', 'ngOnChanges', 'ngOnDestroy'];
        hooks.forEach(hook => {
            const original = constructor.prototype[hook];
            switch (hook) {
                case "ngOnInit":
                    constructor.prototype['ngOnInit'] = function (...args) {
                        let scope = this;
                        store.properties.keys().forEach(key => {
                            store.properties.item(key)
                                .asObservable()
                                .subscribe(next => {
                                scope[key] = next;
                            });
                        });
                        store.actions.keys().forEach(key => {
                            scope[key] = store.actions.item(key);
                        });
                        original && original.apply(scope, args);
                    };
                    break;
                case "ngOnChanges":
                    constructor.prototype['ngOnChanges'] = function (...args) {
                        let scope = this;
                        original && original.apply(scope, args);
                    };
                    break;
                case "ngOnDestroy":
                    constructor.prototype['ngOnDestroy'] = function (...args) {
                        let scope = this;
                        store.properties.values()
                            .forEach(p => p.next(null));
                        original && original.apply(scope, args);
                    };
                    break;
            }
        });
    };
}
exports.Angdux = Angdux;
//# sourceMappingURL=data:application/json;base64,